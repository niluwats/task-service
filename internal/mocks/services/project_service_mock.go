// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/niluwats/task-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, project
func (_m *ProjectService) Create(ctx context.Context, project domain.Project) (*domain.Project, error) {
	ret := _m.Called(ctx, project)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) (*domain.Project, error)); ok {
		return rf(ctx, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) *domain.Project); ok {
		r0 = rf(ctx, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Project) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, projectId
func (_m *ProjectService) Remove(ctx context.Context, projectId string) error {
	ret := _m.Called(ctx, projectId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, project
func (_m *ProjectService) Update(ctx context.Context, project domain.Project) (*domain.Project, error) {
	ret := _m.Called(ctx, project)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) (*domain.Project, error)); ok {
		return rf(ctx, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) *domain.Project); ok {
		r0 = rf(ctx, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Project) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewAll provides a mock function with given fields: ctx
func (_m *ProjectService) ViewAll(ctx context.Context) ([]domain.Project, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewByID provides a mock function with given fields: ctx, projectId
func (_m *ProjectService) ViewByID(ctx context.Context, projectId string) (*domain.Project, error) {
	ret := _m.Called(ctx, projectId)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Project, error)); ok {
		return rf(ctx, projectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Project); ok {
		r0 = rf(ctx, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
