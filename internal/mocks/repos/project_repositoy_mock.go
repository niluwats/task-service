// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/niluwats/task-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *ProjectRepository) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ProjectRepository) FindAll(ctx context.Context) ([]domain.Project, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *ProjectRepository) FindByID(ctx context.Context, ID string) (*domain.Project, error) {
	ret := _m.Called(ctx, ID)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Project, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Project); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, project
func (_m *ProjectRepository) Insert(ctx context.Context, project domain.Project) (*domain.Project, error) {
	ret := _m.Called(ctx, project)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) (*domain.Project, error)); ok {
		return rf(ctx, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) *domain.Project); ok {
		r0 = rf(ctx, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Project) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, project
func (_m *ProjectRepository) Update(ctx context.Context, ID string, project domain.Project) (*domain.Project, error) {
	ret := _m.Called(ctx, ID, project)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Project) (*domain.Project, error)); ok {
		return rf(ctx, ID, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Project) *domain.Project); ok {
		r0 = rf(ctx, ID, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Project) error); ok {
		r1 = rf(ctx, ID, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
